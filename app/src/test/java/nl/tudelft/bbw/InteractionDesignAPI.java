package nl.tudelft.bbw;


import net.i2p.crypto.eddsa.EdDSAPrivateKey;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.robolectric.RobolectricTestRunner;
import org.robolectric.RuntimeEnvironment;
import org.robolectric.annotation.Config;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.util.ArrayList;
import java.util.List;

import nl.tudelft.bbw.blockchain.Acquaintance;
import nl.tudelft.bbw.blockchain.Block;
import nl.tudelft.bbw.blockchain.TrustValues;
import nl.tudelft.bbw.controller.ED25519;
import nl.tudelft.bbw.exception.BlockAlreadyExistsException;
import nl.tudelft.bbw.exception.HashException;

import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertFalse;
import static junit.framework.Assert.assertTrue;
import static org.junit.Assert.assertNotEquals;


@RunWith(RobolectricTestRunner.class)
@Config(manifest=Config.NONE, constants = BuildConfig.class, sdk = 21)
public class InteractionDesignAPI {

    /**
     * Please add your name and iban number
     */
    final String yourName = "naqib";
    final String yourIban = "nl22rabo22222";


    @Before
    public final void setUp() throws HashException, BlockAlreadyExistsException {

        API.initializeAPI(yourName, yourIban, RuntimeEnvironment.application);
    }


    @Test
    public final void getMyNameTest()
    {
        assertEquals(yourName, API.getMyName());
    }


    @Test
    public final void getMyIbanTest()
    {
        assertEquals(yourIban, API.getMyIban());
    }


    @Test
    public final void addAcquaintanceTest() throws HashException, BlockAlreadyExistsException,
            NoSuchAlgorithmException, InvalidKeyException, SignatureException {

        List<Block> list = API.getMyContacts();
        print(API.getMyContacts());
        /**
         *  Since this is a simulation, an Acquaintance object is generated.
         *  In real life situation, an Acquaintance object is generated by the other person application and given to you.
         */
        Acquaintance pairedPerson = generateAcquaintance(" friendname", " friendiban ");



        API.addAcquaintance(pairedPerson);
        print(API.getMyContacts());

        assertNotEquals(API.getMyContacts(), list);
    }


    @Test
    public final void revokeContactTest()
            throws HashException, BlockAlreadyExistsException, NoSuchAlgorithmException, InvalidKeyException, SignatureException {

        Acquaintance testAcquaintance = generateAcquaintance(" friendname", " friendiban ");

        API.addAcquaintance(testAcquaintance);
        List<Block> list = API.getMyContacts();

        API.revokeContact(testAcquaintance);
        assertNotEquals(API.getMyContacts(), list);
    }


    @Test
    public final void databaseEmptyTest() {
        assertFalse(API.isDatabaseEmpty());
    }


    @Test
    public final void succesfulTransactionTest() {
        List<Block> list = API.getMyContacts();
        API.successfulTransaction(list.get(0));
        assertNotEquals(list.get(0).getTrustValue(), TrustValues.INITIALIZED);
    }


    @Test
    public final void failedTransactionTest() {
        List<Block> list = API.getMyContacts();
        API.failedTransaction(list.get(0));
        assertNotEquals(list.get(0).getTrustValue(), TrustValues.INITIALIZED);
    }


    @Test
    public final void verifyIBANTest() {
        List<Block> list = API.getMyContacts();
        API.verifyIBAN(list.get(0));
        API.getMyContacts().get(0).getTrustValue();
        assertNotEquals(list.get(0).getTrustValue(), TrustValues.INITIALIZED);
    }


    @Test
    public final void makeAcquaintanceTest() throws NoSuchAlgorithmException, InvalidKeyException, SignatureException, BlockAlreadyExistsException, HashException {

        Acquaintance testAcquaintance = generateAcquaintance(" friendname", " friendiban ");
        API.addAcquaintance(testAcquaintance);
        List<Block> list = API.getMyContacts();
        Acquaintance myAcquaintanceObject = API.makeAcquaintanceObject();
        assertEquals(API.getMyName(), myAcquaintanceObject.getName());
        assertEquals(API.getMyIban(), myAcquaintanceObject.getIban());
        assertEquals(API.getMyPublicKey(), myAcquaintanceObject.getPublicKey());
        assertTrue(myAcquaintanceObject.getMultichain().contains(list));
    }










    private final Acquaintance generateAcquaintance(String name, String iban) {

        EdDSAPrivateKey privateKey = ED25519.generatePrivateKey();
        Acquaintance newUser = new Acquaintance(name, iban, ED25519.getPublicKey(ED25519.generatePrivateKey()), new ArrayList<List<Block>>());
        ArrayList<List<Block>> newUserMultichain = new ArrayList<List<Block>>();
        ArrayList<Block> test = new ArrayList<Block>();
        test.add(new Block(newUser));
        newUserMultichain.add(test);
        newUser.setMultichain(newUserMultichain);
        newUser.setPrivateKey(privateKey);
        return newUser;
    }
    private final void print(List<Block> list) {
        for(Block e: list)
        {
            System.out.println(e.toString2());
        }
        System.out.println();
    }


}
